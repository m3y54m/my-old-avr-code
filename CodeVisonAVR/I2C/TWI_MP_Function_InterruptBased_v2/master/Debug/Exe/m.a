;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : I2C Interrupt Based Communication
;Version : 3.0.1
;Date    : 1393 Bahman 14
;Author  : Meysam Parvizi
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// TWI Master Transmitter or Receiver mode selection
;#define TWI_WRITE 0
;#define TWI_READ  1
;
;// TWI Master receive buffer
;unsigned char twi_rx_buffer[8];
;unsigned char twi_rx_count;
;unsigned char twi_rx_index;
;
;// TWI Master transmit buffer
;unsigned char twi_tx_buffer[8];
;unsigned char twi_tx_count;
;unsigned char twi_tx_index;
;
;// TWI Slave 7-bit address
;unsigned char twi_slave_addr;
;
;bit twi_mode=0; // Master Transmitter:0 , Master Receiver:1
;
;bit twi_rx_complete=0;
;bit twi_tx_complete=0;
;bit twi_error=0;
;
;void twi_init()
; 0000 003A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003B    // Prescaler=1
; 0000 003C    TWSR=0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 003D    // Bit Rate=100 khz (if XTAL=8Mhz)
; 0000 003E    TWBR=32;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003F }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;unsigned char twi_exchange(unsigned char slave_addr,unsigned char tx_count,unsigned char rx_count)
; 0000 0042 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0043    if (tx_count!=0 || rx_count!=0)
;PCODE: $00000017 VOL: 0
;	slave_addr -> Y+2
;	tx_count -> Y+1
;	rx_count -> Y+0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0044    {
; 0000 0045       twi_tx_index=0;
;PCODE: $00000020 VOL: 0
; 0000 0046       twi_rx_index=0;
;PCODE: $00000021 VOL: 0
; 0000 0047       twi_tx_count=tx_count;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0048       twi_rx_count=rx_count;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0049       twi_slave_addr=slave_addr;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004A       twi_error=0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 004B 
; 0000 004C       if (tx_count==0)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004D          twi_mode=1; // Master Receiver:1
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004E       else
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 004F          twi_mode=0; // Master Transmitter:0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0050 
; 0000 0051       // Send START condition and enable TWI interrupt
; 0000 0052       TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0053 
; 0000 0054       if(tx_count!=0)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0055       {
; 0000 0056          twi_tx_complete=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0057          while(twi_tx_complete==0 && twi_error==0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0058          if (twi_error==1)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0059          {
; 0000 005A             //puts("TWI TX ERROR\r\n");
; 0000 005B             return 0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 005C          }
; 0000 005D       }
;PCODE: $00000052 VOL: 0
; 0000 005E 
; 0000 005F       if(rx_count!=0)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0060       {
; 0000 0061          twi_rx_complete=0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0062          while(twi_rx_complete==0 && twi_error==0);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0063          if (twi_error==1)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0064          {
; 0000 0065             //puts("TWI RX ERROR\r\n");
; 0000 0066             return 0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0067          }
; 0000 0068       }
;PCODE: $0000006D VOL: 0
; 0000 0069 
; 0000 006A       return 1;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 006B    }
; 0000 006C    else
;PCODE: $00000072 VOL: 0
; 0000 006D       return 1;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 006E }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;
;interrupt [TWI] void twi_interrupt(void)
; 0000 0071 {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0072    unsigned char twi_status;
; 0000 0073    twi_status = TWSR & 0xF8;
;PCODE: $0000007C VOL: 0
;	twi_status -> R17
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0074    //printf("  STATUS:%X-TWWC:%d-TR:%d\r\n",twi_status,(TWCR & (1<<TWWC))>>TWWC,twi_mode);
; 0000 0075 
; 0000 0076    switch (twi_status)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0077    {
; 0000 0078       // A START condition has been transmitted
; 0000 0079       case 0x08:
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 007A       // A repeated START condition has been transmitted
; 0000 007B       case 0x10:
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007C          if (twi_mode==0)
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 007D          {
; 0000 007E             // SLA+W will be transmitted; ACK or NOT ACK will be received
; 0000 007F             TWDR = (twi_slave_addr<<1) | TWI_WRITE;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0080          }
; 0000 0081          else // if (twi_mode==1)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0082          {
; 0000 0083             // SLA+R will be transmitted; ACK or NOT ACK will be received
; 0000 0084             TWDR = (twi_slave_addr<<1) | TWI_READ;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0085          }
;PCODE: $00000096 VOL: 0
; 0000 0086          TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0087          break;
;PCODE: $00000099 VOL: 0
; 0000 0088 
; 0000 0089       // SLA+W has been transmitted; ACK has been received
; 0000 008A       case 0x18:
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 008B          if (twi_tx_index<twi_tx_count)
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 008C          {
; 0000 008D             // Data byte will be transmitted and ACK or NOT ACK will be received
; 0000 008E             TWDR = twi_tx_buffer[twi_tx_index];
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 008F             twi_tx_index++;
;PCODE: $000000A5 VOL: 0
; 0000 0090             TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0091 
; 0000 0092             if (twi_tx_index==twi_tx_count)
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0093                twi_tx_complete=1;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0094          }
;PCODE: $000000AE VOL: 0
; 0000 0095          break;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0096 
; 0000 0097       // SLA+R has been transmitted; ACK has been received
; 0000 0098       case 0x40:
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0099          if (twi_rx_count==1)
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 009A          {
; 0000 009B              // Data byte will be received and NOT ACK will be returned
; 0000 009C             TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 009D          }
; 0000 009E          else // if (twi_rx_count>1)
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 009F          {
; 0000 00A0             // Data byte will be received and ACK will be returned
; 0000 00A1             TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00A2          }
;PCODE: $000000BD VOL: 0
; 0000 00A3          break;
;PCODE: $000000BE VOL: 0
; 0000 00A4 
; 0000 00A5       // Data byte has been received; ACK has been returned
; 0000 00A6       case 0x50:
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00A7          if (twi_rx_index<twi_rx_count-2)
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00A8          {
; 0000 00A9             // Data byte will be received and ACK will be returned
; 0000 00AA             twi_rx_buffer[twi_rx_index] = TWDR;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00AB             TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00AC             twi_rx_index++;
;PCODE: $000000D0 VOL: 0
; 0000 00AD          }
; 0000 00AE          else if (twi_rx_index==twi_rx_count-2)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00AF          {
; 0000 00B0             // Data byte will be received and NOT ACK will be returned
; 0000 00B1             twi_rx_buffer[twi_rx_index] = TWDR;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00B2             TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00B3             twi_rx_index++;
;PCODE: $000000E1 VOL: 0
; 0000 00B4          }
; 0000 00B5          break;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00B6 
; 0000 00B7       // Data byte has been transmitted; ACK has been received
; 0000 00B8       case 0x28:
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00B9          if (twi_tx_index<twi_tx_count)
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00BA          {
; 0000 00BB             // Data byte will be transmitted and ACK or NOT ACK will be received
; 0000 00BC             TWDR = twi_tx_buffer[twi_tx_index];
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00BD             twi_tx_index++;
;PCODE: $000000F0 VOL: 0
; 0000 00BE             TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00BF 
; 0000 00C0             if (twi_tx_index==twi_tx_count)
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00C1                twi_tx_complete=1;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00C2          }
;PCODE: $000000F9 VOL: 0
; 0000 00C3          else if (twi_rx_count==0)
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00C4          {
; 0000 00C5             // STOP condition will be transmitted and TWSTO Flag will be reset
; 0000 00C6             TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO) | (1<<TWIE);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00C7          }
; 0000 00C8          else if (twi_rx_count!=0)
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00C9          {
; 0000 00CA             // Without releasing control of the bus send a REPEATED START condition and prepare to go to Master Receiver ...
; 0000 00CB             TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWIE);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00CC             twi_mode=1;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00CD          }
; 0000 00CE          break;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00CF 
; 0000 00D0       // Data byte has been received; NOT ACK has been returned
; 0000 00D1       case 0x58:
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00D2          twi_rx_buffer[twi_rx_index] = TWDR;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00D3          // STOP condition will be transmitted and TWSTO Flag will be reset
; 0000 00D4          TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO) | (1<<TWIE);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00D5 
; 0000 00D6          twi_rx_complete=1;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00D7          break;
;PCODE: $0000011A VOL: 0
; 0000 00D8 
; 0000 00D9       // SLA+W has been transmitted; NOT ACK has been received
; 0000 00DA       case 0x20:
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00DB       // Data byte has been transmitted; NOT ACK has been received
; 0000 00DC       case 0x30:
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00DD       // SLA+R has been transmitted; NOT ACK has been received
; 0000 00DE       case 0x48:
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00DF          // STOP condition will be transmitted and TWSTO Flag will be reset
; 0000 00E0          TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO) | (1<<TWIE);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00E1          twi_error=1;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00E2          break;
;PCODE: $0000012D VOL: 0
; 0000 00E3    }
;PCODE: $0000012E VOL: 0
; 0000 00E4 }
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;
;void main(void)
; 0000 00E7 {
;PCODE: $00000133 VOL: 0
; 0000 00E8 // Declare your local variables here
; 0000 00E9 
; 0000 00EA // Input/Output Ports initialization
; 0000 00EB // Port A initialization
; 0000 00EC // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00ED DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00EE // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00EF PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00F0 
; 0000 00F1 // Port B initialization
; 0000 00F2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00F3 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00F4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00F5 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00F6 
; 0000 00F7 // Port C initialization
; 0000 00F8 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00F9 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00FA // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00FB PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00FC 
; 0000 00FD // Port D initialization
; 0000 00FE // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00FF DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0100 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0101 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0102 
; 0000 0103 // Timer/Counter 0 initialization
; 0000 0104 // Clock source: System Clock
; 0000 0105 // Clock value: Timer 0 Stopped
; 0000 0106 // Mode: Normal top=0xFF
; 0000 0107 // OC0 output: Disconnected
; 0000 0108 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0109 TCNT0=0x00;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 010A OCR0=0x00;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 010B 
; 0000 010C // Timer/Counter 1 initialization
; 0000 010D // Clock source: System Clock
; 0000 010E // Clock value: Timer1 Stopped
; 0000 010F // Mode: Normal top=0xFFFF
; 0000 0110 // OC1A output: Disconnected
; 0000 0111 // OC1B output: Disconnected
; 0000 0112 // Noise Canceler: Off
; 0000 0113 // Input Capture on Falling Edge
; 0000 0114 // Timer1 Overflow Interrupt: Off
; 0000 0115 // Input Capture Interrupt: Off
; 0000 0116 // Compare A Match Interrupt: Off
; 0000 0117 // Compare B Match Interrupt: Off
; 0000 0118 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0119 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 011A TCNT1H=0x00;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 011B TCNT1L=0x00;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 011C ICR1H=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 011D ICR1L=0x00;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 011E OCR1AH=0x00;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 011F OCR1AL=0x00;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0120 OCR1BH=0x00;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0121 OCR1BL=0x00;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0122 
; 0000 0123 // Timer/Counter 2 initialization
; 0000 0124 // Clock source: System Clock
; 0000 0125 // Clock value: Timer2 Stopped
; 0000 0126 // Mode: Normal top=0xFF
; 0000 0127 // OC2 output: Disconnected
; 0000 0128 ASSR=0<<AS2;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0129 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 012A TCNT2=0x00;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 012B OCR2=0x00;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 012C 
; 0000 012D // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 012E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 012F 
; 0000 0130 // External Interrupt(s) initialization
; 0000 0131 // INT0: Off
; 0000 0132 // INT1: Off
; 0000 0133 // INT2: Off
; 0000 0134 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0135 MCUCSR=(0<<ISC2);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0136 
; 0000 0137 // USART initialization
; 0000 0138 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0139 // USART Receiver: On
; 0000 013A // USART Transmitter: On
; 0000 013B // USART Mode: Asynchronous
; 0000 013C // USART Baud Rate: 9600
; 0000 013D UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 013E UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 013F UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0140 UBRRH=0x00;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0141 UBRRL=0x33;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0142 
; 0000 0143 // Analog Comparator initialization
; 0000 0144 // Analog Comparator: Off
; 0000 0145 // The Analog Comparator's positive input is
; 0000 0146 // connected to the AIN0 pin
; 0000 0147 // The Analog Comparator's negative input is
; 0000 0148 // connected to the AIN1 pin
; 0000 0149 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 014A SFIOR=(0<<ACME);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 014B 
; 0000 014C // ADC initialization
; 0000 014D // ADC disabled
; 0000 014E ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 014F 
; 0000 0150 // SPI initialization
; 0000 0151 // SPI disabled
; 0000 0152 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0153 
; 0000 0154 // TWI initialization
; 0000 0155 // Mode: TWI Master
; 0000 0156 twi_init();
;PCODE: $0000017E VOL: 0
; 0000 0157 
; 0000 0158 // Alphanumeric LCD initialization
; 0000 0159 // Connections are specified in the
; 0000 015A // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 015B // RS - PORTA Bit 0
; 0000 015C // RD - PORTA Bit 1
; 0000 015D // EN - PORTA Bit 2
; 0000 015E // D4 - PORTA Bit 4
; 0000 015F // D5 - PORTA Bit 5
; 0000 0160 // D6 - PORTA Bit 6
; 0000 0161 // D7 - PORTA Bit 7
; 0000 0162 // Characters/line: 16
; 0000 0163 lcd_init(16);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0164 
; 0000 0165 // Global enable interrupts
; 0000 0166 #asm("sei")
;PCODE: $00000181 VOL: 0
	sei
;PCODE: $00000182 VOL: 0
; 0000 0167 
; 0000 0168 while (1)
;PCODE: $00000183 VOL: 0
; 0000 0169 {
; 0000 016A    unsigned char str[16];
; 0000 016B 
; 0000 016C    twi_tx_buffer[0]++;
;PCODE: $00000184 VOL: 0
;	str -> Y+0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 016D    while(!twi_exchange(0x01,1,1));
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 016E 
; 0000 016F    sprintf(str,"Transmitted=%d",twi_tx_buffer[0]);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0170    lcd_clear();
;PCODE: $0000019F VOL: 0
; 0000 0171    lcd_gotoxy(0,1);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0172    lcd_puts(str);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0173 
; 0000 0174    sprintf(str,"Received=%d",twi_rx_buffer[0]);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0175    lcd_gotoxy(0,0);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0176    lcd_puts(str);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0177 
; 0000 0178    delay_ms(100);
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0179 }
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 017A 
; 0000 017B }
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
